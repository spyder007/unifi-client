/* tslint:disable */
/* eslint-disable */
/**
 * Unifi IP Manager API
 * API Wrapper for the Unifi Controller
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 * Class Info.
 * @export
 * @interface Info
 */
export interface Info {
  /**
   * Gets or sets the options.
   * @type {UnifiControllerOptions}
   * @memberof Info
   */
  unifiControllerOptions?: UnifiControllerOptions | null;
  /**
   *
   * @type {string}
   * @memberof Info
   */
  version?: string | null;
}
/**
 *
 * @export
 * @interface ProvisionRequest
 */
export interface ProvisionRequest {
  /**
   *
   * @type {string}
   * @memberof ProvisionRequest
   */
  group?: string | null;
  /**
   *
   * @type {string}
   * @memberof ProvisionRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof ProvisionRequest
   */
  hostName?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof ProvisionRequest
   */
  static_ip?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ProvisionRequest
   */
  sync_dns?: boolean;
}
/**
 *
 * @export
 * @interface ServiceResult
 */
export interface ServiceResult {
  /**
   *
   * @type {boolean}
   * @memberof ServiceResult
   */
  success?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResult
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResult
   */
  messages?: Array<string> | null;
}
/**
 *
 * @export
 * @interface ServiceResultOfListOfUniClient
 */
export interface ServiceResultOfListOfUniClient {
  /**
   *
   * @type {boolean}
   * @memberof ServiceResultOfListOfUniClient
   */
  success?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResultOfListOfUniClient
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResultOfListOfUniClient
   */
  messages?: Array<string> | null;
  /**
   *
   * @type {Array<UniClient>}
   * @memberof ServiceResultOfListOfUniClient
   */
  data?: Array<UniClient> | null;
}
/**
 *
 * @export
 * @interface ServiceResultOfListOfUniClientAllOf
 */
export interface ServiceResultOfListOfUniClientAllOf {
  /**
   *
   * @type {Array<UniClient>}
   * @memberof ServiceResultOfListOfUniClientAllOf
   */
  data?: Array<UniClient> | null;
}
/**
 *
 * @export
 * @interface ServiceResultOfUniClient
 */
export interface ServiceResultOfUniClient {
  /**
   *
   * @type {boolean}
   * @memberof ServiceResultOfUniClient
   */
  success?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResultOfUniClient
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ServiceResultOfUniClient
   */
  messages?: Array<string> | null;
  /**
   *
   * @type {UniClient}
   * @memberof ServiceResultOfUniClient
   */
  data?: UniClient | null;
}
/**
 *
 * @export
 * @interface ServiceResultOfUniClientAllOf
 */
export interface ServiceResultOfUniClientAllOf {
  /**
   *
   * @type {UniClient}
   * @memberof ServiceResultOfUniClientAllOf
   */
  data?: UniClient | null;
}
/**
 * Class UniClient.
 * @export
 * @interface UniClient
 */
export interface UniClient {
  /**
   * Gets or sets the identifier.
   * @type {string}
   * @memberof UniClient
   */
  _id?: string | null;
  /**
   * Gets or sets the mac.
   * @type {string}
   * @memberof UniClient
   */
  mac?: string | null;
  /**
   * Gets or sets the hostname.
   * @type {string}
   * @memberof UniClient
   */
  hostname?: string | null;
  /**
   * Gets or sets a value indicating whether [use fixedip].
   * @type {boolean}
   * @memberof UniClient
   */
  use_fixedip?: boolean;
  /**
   * Gets or sets the fixed ip.
   * @type {string}
   * @memberof UniClient
   */
  fixed_ip?: string | null;
  /**
   * Gets or sets a value indicating whether this UniClient is noted.
   * @type {boolean}
   * @memberof UniClient
   */
  noted?: boolean;
  /**
   * Gets or sets the note.
   * @type {string}
   * @memberof UniClient
   */
  note?: string | null;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof UniClient
   */
  name?: string | null;
  /**
   * Gets or sets the type of the object.
   * @type {string}
   * @memberof UniClient
   */
  objectType?: string | null;
  /**
   * Gets or sets the IPBlock Name associated with this IP
   * @type {string}
   * @memberof UniClient
   */
  ipGroup?: string | null;
  /**
   *
   * @type {UniNote}
   * @memberof UniClient
   */
  noteObject?: UniNote | null;
}
/**
 *
 * @export
 * @interface UniNote
 */
export interface UniNote {
  /**
   *
   * @type {boolean}
   * @memberof UniNote
   */
  set_on_device?: boolean;
  /**
   *
   * @type {string}
   * @memberof UniNote
   */
  dns_hostname?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof UniNote
   */
  sync_dnshostname?: boolean;
}
/**
 * Class MyOptions.
 * @export
 * @interface UnifiControllerOptions
 */
export interface UnifiControllerOptions {
  /**
   * Unifi Controller URL
   * @type {string}
   * @memberof UnifiControllerOptions
   */
  url?: string | null;
  /**
   * Gets or sets the client identifier.
   * @type {string}
   * @memberof UnifiControllerOptions
   */
  username?: string | null;
  /**
   * Gets or sets the client secret.
   * @type {string}
   * @memberof UnifiControllerOptions
   */
  password?: string | null;
}

/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} mac
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientDeleteClient: async (
      mac: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mac' is not null or undefined
      assertParamExists("clientDeleteClient", "mac", mac);
      const localVarPath = `/client/{mac}`.replace(
        `{${"mac"}}`,
        encodeURIComponent(String(mac))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/client`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ProvisionRequest} provisionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientProvisionClient: async (
      provisionRequest: ProvisionRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provisionRequest' is not null or undefined
      assertParamExists(
        "clientProvisionClient",
        "provisionRequest",
        provisionRequest
      );
      const localVarPath = `/client/provision`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        provisionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} mac
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientDeleteClient(
      mac: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.clientDeleteClient(mac, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServiceResultOfListOfUniClient>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.clientGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {ProvisionRequest} provisionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientProvisionClient(
      provisionRequest: ProvisionRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ServiceResultOfUniClient>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.clientProvisionClient(
          provisionRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ClientApiFp(configuration);
  return {
    /**
     *
     * @param {string} mac
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientDeleteClient(
      mac: string,
      options?: any
    ): AxiosPromise<ServiceResult> {
      return localVarFp
        .clientDeleteClient(mac, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientGet(options?: any): AxiosPromise<ServiceResultOfListOfUniClient> {
      return localVarFp
        .clientGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ProvisionRequest} provisionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientProvisionClient(
      provisionRequest: ProvisionRequest,
      options?: any
    ): AxiosPromise<ServiceResultOfUniClient> {
      return localVarFp
        .clientProvisionClient(provisionRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
  /**
   *
   * @param {string} mac
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientApi
   */
  public clientDeleteClient(mac: string, options?: any) {
    return ClientApiFp(this.configuration)
      .clientDeleteClient(mac, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets this instance.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientApi
   */
  public clientGet(options?: any) {
    return ClientApiFp(this.configuration)
      .clientGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ProvisionRequest} provisionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientApi
   */
  public clientProvisionClient(
    provisionRequest: ProvisionRequest,
    options?: any
  ) {
    return ClientApiFp(this.configuration)
      .clientProvisionClient(provisionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * InfoApi - axios parameter creator
 * @export
 */
export const InfoApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    infoGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InfoApi - functional programming interface
 * @export
 */
export const InfoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InfoApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async infoGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.infoGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InfoApi - factory interface
 * @export
 */
export const InfoApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InfoApiFp(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    infoGet(options?: any): AxiosPromise<Info> {
      return localVarFp
        .infoGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InfoApi - object-oriented interface
 * @export
 * @class InfoApi
 * @extends {BaseAPI}
 */
export class InfoApi extends BaseAPI {
  /**
   *
   * @summary Gets this instance.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InfoApi
   */
  public infoGet(options?: any) {
    return InfoApiFp(this.configuration)
      .infoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
